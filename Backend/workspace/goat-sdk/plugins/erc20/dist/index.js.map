{"version":3,"sources":["../src/index.ts","../src/token.ts","../src/erc20.plugin.ts","../src/erc20.service.ts","../src/abi.ts"],"sourcesContent":["export * from \"./token\";\nexport * from \"./erc20.plugin\";\n","export type Token = {\n    decimals: number;\n    symbol: string;\n    name: string;\n    chains: Record<number, { contractAddress: `0x${string}` }>;\n};\n\nexport type ChainSpecificToken = {\n    chainId: number;\n    decimals: number;\n    symbol: string;\n    name: string;\n    contractAddress: `0x${string}`;\n};\n\nexport const PEPE: Token = {\n    decimals: 18,\n    symbol: \"PEPE\",\n    name: \"Pepe\",\n    chains: {\n        \"1\": {\n            contractAddress: \"0x6982508145454Ce325dDbE47a25d4ec3d2311933\",\n        },\n        \"10\": {\n            contractAddress: \"0xc1c167cc44f7923cd0062c4370df962f9ddb16f5\",\n        },\n        \"8453\": {\n            contractAddress: \"0xb4fde59a779991bfb6a52253b51947828b982be3\",\n        },\n    },\n};\n\nexport const USDC: Token = {\n    decimals: 6,\n    symbol: \"USDC\",\n    name: \"USDC\",\n    chains: {\n        \"1\": {\n            contractAddress: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        },\n        \"10\": {\n            contractAddress: \"0x0b2c639c533813f4aa9d7837caf62653d097ff85\",\n        },\n        \"137\": {\n            contractAddress: \"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359\",\n        },\n        \"8453\": {\n            contractAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n        },\n        \"84532\": {\n            contractAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n        },\n        \"11155111\": {\n            contractAddress: \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\",\n        },\n        \"34443\": {\n            contractAddress: \"0xd988097fb8612cc24eeC14542bC03424c656005f\",\n        },\n    },\n};\n\nexport const MODE: Token = {\n    decimals: 18,\n    symbol: \"MODE\",\n    name: \"Mode\",\n    chains: {\n        \"34443\": {\n            contractAddress: \"0xDfc7C877a950e49D2610114102175A06C2e3167a\",\n        },\n    },\n};\n\nexport const WETH: Token = {\n    decimals: 18,\n    symbol: \"WETH\",\n    name: \"Wrapped Ether\",\n    chains: {\n        \"1\": {\n            contractAddress: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        },\n        \"8453\": {\n            contractAddress: \"0x4200000000000000000000000000000000000006\",\n        },\n        \"34443\": {\n            contractAddress: \"0x4200000000000000000000000000000000000006\",\n        },\n        \"42161\": {\n            contractAddress: \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n        },\n        \"10\": {\n            contractAddress: \"0x4200000000000000000000000000000000000006\",\n        },\n        \"137\": {\n            contractAddress: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n        },\n    },\n};\n\nexport function getTokensForNetwork(chainId: number, tokens: Token[]): ChainSpecificToken[] {\n    const result: ChainSpecificToken[] = [];\n\n    for (const token of tokens) {\n        const chainData = token.chains[chainId];\n        if (chainData) {\n            result.push({\n                chainId: chainId,\n                decimals: token.decimals,\n                symbol: token.symbol,\n                name: token.name,\n                contractAddress: chainData.contractAddress,\n            });\n        }\n    }\n\n    return result;\n}\n","import { type Chain, PluginBase } from \"@goat-sdk/core\";\nimport type { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\nimport { Erc20Service } from \"./erc20.service\";\nimport { type Token } from \"./token\";\n\nexport type ERC20PluginCtorParams = {\n    tokens: Token[];\n};\n\nexport class ERC20Plugin extends PluginBase<EVMWalletClient> {\n    constructor({ tokens }: ERC20PluginCtorParams) {\n        super(\"erc20\", [new Erc20Service({ tokens })]);\n    }\n\n    supportsChain = (chain: Chain) => chain.type === \"evm\";\n}\n\nexport function erc20({ tokens }: ERC20PluginCtorParams) {\n    return new ERC20Plugin({ tokens });\n}\n","import { Tool } from \"@goat-sdk/core\";\nimport { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\nimport { ERC20_ABI } from \"./abi\";\nimport {\n    ApproveParameters,\n    ConvertFromBaseUnitParameters,\n    ConvertToBaseUnitParameters,\n    GetTokenAllowanceParameters,\n    GetTokenBalanceParameters,\n    GetTokenInfoBySymbolParameters,\n    GetTokenTotalSupplyParameters,\n    RevokeApprovalParameters,\n    TransferFromParameters,\n    TransferParameters,\n} from \"./parameters\";\nimport { Token } from \"./token\";\n\nexport class Erc20Service {\n    private tokens: Token[];\n\n    constructor({ tokens }: { tokens?: Token[] } = {}) {\n        this.tokens = tokens ?? [];\n    }\n\n    @Tool({\n        description: \"Get the ERC20 token info by its symbol, including the contract address, decimals, and name\",\n    })\n    async getTokenInfoBySymbol(walletClient: EVMWalletClient, parameters: GetTokenInfoBySymbolParameters) {\n        const token = this.tokens.find((token) =>\n            [token.symbol, token.symbol.toLowerCase()].includes(parameters.symbol),\n        );\n\n        if (!token) {\n            throw Error(`Token with symbol ${parameters.symbol} not found`);\n        }\n\n        const chain = walletClient.getChain();\n\n        const contractAddress = token.chains[chain.id]?.contractAddress;\n\n        if (!contractAddress) {\n            throw Error(`Token with symbol ${parameters.symbol} not found on chain ${chain.id}`);\n        }\n\n        return {\n            symbol: token?.symbol,\n            contractAddress,\n            decimals: token?.decimals,\n            name: token?.name,\n        };\n    }\n\n    @Tool({\n        description: \"Get the balance of an ERC20 token in base units. Convert to decimal units before returning.\",\n    })\n    async getTokenBalance(walletClient: EVMWalletClient, parameters: GetTokenBalanceParameters) {\n        try {\n            const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"balanceOf\",\n                args: [resolvedWalletAddress],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Transfer an amount of an ERC20 token to an address\",\n    })\n    async transfer(walletClient: EVMWalletClient, parameters: TransferParameters) {\n        try {\n            const to = await walletClient.resolveAddress(parameters.to);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"transfer\",\n                args: [to, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the total supply of an ERC20 token\",\n    })\n    async getTokenTotalSupply(walletClient: EVMWalletClient, parameters: GetTokenTotalSupplyParameters) {\n        try {\n            const rawTotalSupply = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"totalSupply\",\n            });\n\n            return rawTotalSupply.value;\n        } catch (error) {\n            throw Error(`Failed to fetch total supply: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the allowance of an ERC20 token\",\n    })\n    async getTokenAllowance(walletClient: EVMWalletClient, parameters: GetTokenAllowanceParameters) {\n        try {\n            const owner = await walletClient.resolveAddress(parameters.owner);\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const rawAllowance = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"allowance\",\n                args: [owner, spender],\n            });\n            return Number(rawAllowance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch allowance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Approve an amount of an ERC20 token to an address\",\n    })\n    async approve(walletClient: EVMWalletClient, parameters: ApproveParameters) {\n        try {\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"approve\",\n                args: [spender, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to approve: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Revoke approval for an ERC20 token to an address\",\n    })\n    async revokeApproval(walletClient: EVMWalletClient, parameters: RevokeApprovalParameters) {\n        try {\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"approve\",\n                args: [spender, 0],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to revoke approval: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Transfer an amount of an ERC20 token from an address to another address\",\n    })\n    async transferFrom(walletClient: EVMWalletClient, parameters: TransferFromParameters) {\n        try {\n            const from = await walletClient.resolveAddress(parameters.from);\n            const to = await walletClient.resolveAddress(parameters.to);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"transferFrom\",\n                args: [from, to, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to transfer from: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Convert an amount of an ERC20 token to its base unit\",\n    })\n    async convertToBaseUnit(parameters: ConvertToBaseUnitParameters) {\n        const { amount, decimals } = parameters;\n        const baseUnit = amount * 10 ** decimals;\n        return Number(baseUnit);\n    }\n\n    @Tool({\n        description: \"Convert an amount of an ERC20 token from its base unit to its decimal unit\",\n    })\n    async convertFromBaseUnit(parameters: ConvertFromBaseUnitParameters) {\n        const { amount, decimals } = parameters;\n        const decimalUnit = amount / 10 ** decimals;\n        return Number(decimalUnit);\n    }\n}\n","import { parseAbi } from \"viem\";\n\nexport const ERC20_ABI = parseAbi([\n    \"function transfer(address to, uint256 amount) external returns (bool)\",\n    \"function balanceOf(address account) external view returns (uint256)\",\n    \"function totalSupply() external view returns (uint256)\",\n    \"function allowance(address owner, address spender) external view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) external returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) external returns (bool)\",\n]);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACeO,IAAM,OAAc;AAAA,EACvB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,KAAK;AAAA,MACD,iBAAiB;AAAA,IACrB;AAAA,IACA,MAAM;AAAA,MACF,iBAAiB;AAAA,IACrB;AAAA,IACA,QAAQ;AAAA,MACJ,iBAAiB;AAAA,IACrB;AAAA,EACJ;AACJ;AAEO,IAAM,OAAc;AAAA,EACvB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,KAAK;AAAA,MACD,iBAAiB;AAAA,IACrB;AAAA,IACA,MAAM;AAAA,MACF,iBAAiB;AAAA,IACrB;AAAA,IACA,OAAO;AAAA,MACH,iBAAiB;AAAA,IACrB;AAAA,IACA,QAAQ;AAAA,MACJ,iBAAiB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,MACL,iBAAiB;AAAA,IACrB;AAAA,IACA,YAAY;AAAA,MACR,iBAAiB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,MACL,iBAAiB;AAAA,IACrB;AAAA,EACJ;AACJ;AAEO,IAAM,OAAc;AAAA,EACvB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,SAAS;AAAA,MACL,iBAAiB;AAAA,IACrB;AAAA,EACJ;AACJ;AAEO,IAAM,OAAc;AAAA,EACvB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,KAAK;AAAA,MACD,iBAAiB;AAAA,IACrB;AAAA,IACA,QAAQ;AAAA,MACJ,iBAAiB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,MACL,iBAAiB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,MACL,iBAAiB;AAAA,IACrB;AAAA,IACA,MAAM;AAAA,MACF,iBAAiB;AAAA,IACrB;AAAA,IACA,OAAO;AAAA,MACH,iBAAiB;AAAA,IACrB;AAAA,EACJ;AACJ;AAEO,SAAS,oBAAoB,SAAiB,QAAuC;AACxF,QAAM,SAA+B,CAAC;AAEtC,aAAW,SAAS,QAAQ;AACxB,UAAM,YAAY,MAAM,OAAO,OAAO;AACtC,QAAI,WAAW;AACX,aAAO,KAAK;AAAA,QACR;AAAA,QACA,UAAU,MAAM;AAAA,QAChB,QAAQ,MAAM;AAAA,QACd,MAAM,MAAM;AAAA,QACZ,iBAAiB,UAAU;AAAA,MAC/B,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,SAAO;AACX;;;ACnHA,IAAAA,eAAuC;;;ACAvC,kBAAqB;;;ACArB,kBAAyB;AAElB,IAAM,gBAAY,sBAAS;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;;;ADQM,IAAM,eAAN,MAAmB;AAAA,EAGtB,YAAY,EAAE,OAAO,IAA0B,CAAC,GAAG;AAC/C,SAAK,SAAS,UAAU,CAAC;AAAA,EAC7B;AAAA,EAKA,MAAM,qBAAqB,cAA+B,YAA4C;AAClG,UAAM,QAAQ,KAAK,OAAO;AAAA,MAAK,CAACC,WAC5B,CAACA,OAAM,QAAQA,OAAM,OAAO,YAAY,CAAC,EAAE,SAAS,WAAW,MAAM;AAAA,IACzE;AAEA,QAAI,CAAC,OAAO;AACR,YAAM,MAAM,qBAAqB,WAAW,MAAM,YAAY;AAAA,IAClE;AAEA,UAAM,QAAQ,aAAa,SAAS;AAEpC,UAAM,kBAAkB,MAAM,OAAO,MAAM,EAAE,GAAG;AAEhD,QAAI,CAAC,iBAAiB;AAClB,YAAM,MAAM,qBAAqB,WAAW,MAAM,uBAAuB,MAAM,EAAE,EAAE;AAAA,IACvF;AAEA,WAAO;AAAA,MACH,QAAQ,OAAO;AAAA,MACf;AAAA,MACA,UAAU,OAAO;AAAA,MACjB,MAAM,OAAO;AAAA,IACjB;AAAA,EACJ;AAAA,EAKA,MAAM,gBAAgB,cAA+B,YAAuC;AACxF,QAAI;AACA,YAAM,wBAAwB,MAAM,aAAa,eAAe,WAAW,MAAM;AAEjF,YAAM,aAAa,MAAM,aAAa,KAAK;AAAA,QACvC,SAAS,WAAW;AAAA,QACpB,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,qBAAqB;AAAA,MAChC,CAAC;AAED,aAAO,OAAO,WAAW,KAAK;AAAA,IAClC,SAAS,OAAO;AACZ,YAAM,MAAM,4BAA4B,KAAK,EAAE;AAAA,IACnD;AAAA,EACJ;AAAA,EAKA,MAAM,SAAS,cAA+B,YAAgC;AAC1E,QAAI;AACA,YAAM,KAAK,MAAM,aAAa,eAAe,WAAW,EAAE;AAE1D,YAAM,OAAO,MAAM,aAAa,gBAAgB;AAAA,QAC5C,IAAI,WAAW;AAAA,QACf,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,IAAI,WAAW,MAAM;AAAA,MAChC,CAAC;AACD,aAAO,KAAK;AAAA,IAChB,SAAS,OAAO;AACZ,YAAM,MAAM,uBAAuB,KAAK,EAAE;AAAA,IAC9C;AAAA,EACJ;AAAA,EAKA,MAAM,oBAAoB,cAA+B,YAA2C;AAChG,QAAI;AACA,YAAM,iBAAiB,MAAM,aAAa,KAAK;AAAA,QAC3C,SAAS,WAAW;AAAA,QACpB,KAAK;AAAA,QACL,cAAc;AAAA,MAClB,CAAC;AAED,aAAO,eAAe;AAAA,IAC1B,SAAS,OAAO;AACZ,YAAM,MAAM,iCAAiC,KAAK,EAAE;AAAA,IACxD;AAAA,EACJ;AAAA,EAKA,MAAM,kBAAkB,cAA+B,YAAyC;AAC5F,QAAI;AACA,YAAM,QAAQ,MAAM,aAAa,eAAe,WAAW,KAAK;AAChE,YAAM,UAAU,MAAM,aAAa,eAAe,WAAW,OAAO;AAEpE,YAAM,eAAe,MAAM,aAAa,KAAK;AAAA,QACzC,SAAS,WAAW;AAAA,QACpB,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,OAAO,OAAO;AAAA,MACzB,CAAC;AACD,aAAO,OAAO,aAAa,KAAK;AAAA,IACpC,SAAS,OAAO;AACZ,YAAM,MAAM,8BAA8B,KAAK,EAAE;AAAA,IACrD;AAAA,EACJ;AAAA,EAKA,MAAM,QAAQ,cAA+B,YAA+B;AACxE,QAAI;AACA,YAAM,UAAU,MAAM,aAAa,eAAe,WAAW,OAAO;AAEpE,YAAM,OAAO,MAAM,aAAa,gBAAgB;AAAA,QAC5C,IAAI,WAAW;AAAA,QACf,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,SAAS,WAAW,MAAM;AAAA,MACrC,CAAC;AACD,aAAO,KAAK;AAAA,IAChB,SAAS,OAAO;AACZ,YAAM,MAAM,sBAAsB,KAAK,EAAE;AAAA,IAC7C;AAAA,EACJ;AAAA,EAKA,MAAM,eAAe,cAA+B,YAAsC;AACtF,QAAI;AACA,YAAM,UAAU,MAAM,aAAa,eAAe,WAAW,OAAO;AAEpE,YAAM,OAAO,MAAM,aAAa,gBAAgB;AAAA,QAC5C,IAAI,WAAW;AAAA,QACf,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,SAAS,CAAC;AAAA,MACrB,CAAC;AACD,aAAO,KAAK;AAAA,IAChB,SAAS,OAAO;AACZ,YAAM,MAAM,8BAA8B,KAAK,EAAE;AAAA,IACrD;AAAA,EACJ;AAAA,EAKA,MAAM,aAAa,cAA+B,YAAoC;AAClF,QAAI;AACA,YAAM,OAAO,MAAM,aAAa,eAAe,WAAW,IAAI;AAC9D,YAAM,KAAK,MAAM,aAAa,eAAe,WAAW,EAAE;AAE1D,YAAM,OAAO,MAAM,aAAa,gBAAgB;AAAA,QAC5C,IAAI,WAAW;AAAA,QACf,KAAK;AAAA,QACL,cAAc;AAAA,QACd,MAAM,CAAC,MAAM,IAAI,WAAW,MAAM;AAAA,MACtC,CAAC;AACD,aAAO,KAAK;AAAA,IAChB,SAAS,OAAO;AACZ,YAAM,MAAM,4BAA4B,KAAK,EAAE;AAAA,IACnD;AAAA,EACJ;AAAA,EAKA,MAAM,kBAAkB,YAAyC;AAC7D,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,WAAW,SAAS,MAAM;AAChC,WAAO,OAAO,QAAQ;AAAA,EAC1B;AAAA,EAKA,MAAM,oBAAoB,YAA2C;AACjE,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,cAAc,SAAS,MAAM;AACnC,WAAO,OAAO,WAAW;AAAA,EAC7B;AACJ;AAhLU;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GATQ,aAUH;AA4BA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GArCQ,aAsCH;AAoBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GAzDQ,aA0DH;AAmBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GA5EQ,aA6EH;AAiBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GA7FQ,aA8FH;AAoBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GAjHQ,aAkHH;AAmBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GApIQ,aAqIH;AAmBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GAvJQ,aAwJH;AAoBA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GA3KQ,aA4KH;AASA;AAAA,MAHL,kBAAK;AAAA,IACF,aAAa;AAAA,EACjB,CAAC;AAAA,GApLQ,aAqLH;;;AD7LH,IAAM,cAAN,cAA0B,wBAA4B;AAAA,EACzD,YAAY,EAAE,OAAO,GAA0B;AAC3C,UAAM,SAAS,CAAC,IAAI,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;AAGjD,yBAAgB,CAAC,UAAiB,MAAM,SAAS;AAAA,EAFjD;AAGJ;AAEO,SAAS,MAAM,EAAE,OAAO,GAA0B;AACrD,SAAO,IAAI,YAAY,EAAE,OAAO,CAAC;AACrC;","names":["import_core","token"]}